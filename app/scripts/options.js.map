{"version":3,"sources":["../scripts.babel/options.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;AAGb,SAAS,QAAQ,CAAC,GAAG,EAAE,UAAU,EAAE;;AAEhC,QAAI,OAAO,GAAG,EAAE,CAAC;;;AAGjB,QAAI,GAAG,IAAI,GAAG,EAAE,OAAO,GAAG,iFAAiF,CAAC,KACvG,IAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,EAAE,OAAO,GAAG,QAAQ,GAAG,GAAG,GAAG,kCAAkC,CAAC,KAE9F;;AAEI,eAAO,GAAG,UAAU,CAAC;;;AAGrB,YAAI,KAAK,GAAG,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;KACtD;;;;AAID,QAAI,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;AAC/C,UAAM,CAAC,WAAW,GAAG,OAAO,CAAC;AAC7B,cAAU,CAAC,YAAW;AACpB,cAAM,CAAC,WAAW,GAAG,EAAE,CAAC;KAC3B,EAAE,IAAI,CAAC,CAAC;;;AAGT,QAAI,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,QAAQ,GAAG,KAAK,CAAC;CAClE,CAAC;;;AAGF,SAAS,cAAc,GAAG;;;AAGtB,QAAI,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC;;;AAGjE,QAAI,KAAK,GAAG,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;;;AAGnD,QAAI,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;;;AAGzD,QAAI,OAAO,GAAG;AACV,kBAAU,EAAE,KAAK;AACjB,kBAAU,EAAE,QAAQ;KACvB,CAAC;;;AAGF,QAAI,KAAK,GAAG,IAAI,cAAc,EAAE,CAAC;AACjC,SAAK,CAAC,IAAI,CAAC,MAAM,EAAE,wCAAwC,EAAE,IAAI,CAAC,CAAC;;;AAGnE,SAAK,CAAC,gBAAgB,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;;;AAG3D,SAAK,CAAC,kBAAkB,GAAG,YAAW;;;AAGlC,gBAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,2CAA2C,CAAC,CAAC;;AAGpE,YAAI,KAAK,CAAC,UAAU,IAAI,CAAC,KAAK,KAAK,CAAC,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,MAAM,GAAG,GAAG,CAAA,AAAC,EAAE;;;AAGrE,gBAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;;;AAG1C,kBAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;AACtB,6BAAa,EAAE,IAAI,CAAC,KAAK;AACzB,qBAAK,EAAE,KAAK;aACf,CAAC,CAAC;SACJ;KACJ,CAAA;;;AAGD,SAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;CACvC;;;;AAID,SAAS,eAAe,GAAG;;;AAGzB,QAAI,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;;;AAGjD,QAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;;;AAG/C,UAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;AACtB,aAAK,EAAE,EAAE;KACV,EAAE,UAAS,KAAK,EAAE;;;AAGf,gBAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;KAExD,CAAC,CAAC;CACJ;;;AAGD,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC","file":"options.js","sourcesContent":["'use strict';\n\n//Error function\nfunction Response(res, successMsg) {\n\n   var message = \"\";\n\n   //Session is invalid!\n   if (res == 401) message = \"Your Extension code is invalid, please visit the 'My Account' Page on linkDrops\";\n   else if(res < 200 || res > 299) message = \"Error \" + res + \"! Could not connect to linkDrops\";\n   else\n   {\n       //Set the message to be displayed\n       message = successMsg;\n\n       //Get the email value\n       let email = document.getElementById('email').value;\n   }\n\n   // Update status to let user know options were saved.\n   // Timeout the div after it is displayed\n   let status = document.getElementById('status');\n   status.textContent = message;\n   setTimeout(function() {\n     status.textContent = '';\n }, 3000);\n\n //set the disabled to the save button\n let save = document.getElementById('saveButton').disabled = false;\n};\n\n// Saves options to chrome.storage\nfunction loginExtension() {\n\n    //First set the disabled to the save button\n    let save = document.getElementById('saveButton').disabled = true;\n\n    //Get the email value\n    let email = document.getElementById('email').value;\n\n    //Get the password value\n    let password = document.getElementById('password').value;\n\n    //Callback, create the payload\n    let payload = {\n        \"username\": email,\n        \"password\": password\n    };\n\n    // construct an HTTP request\n    let xhttp = new XMLHttpRequest();\n    xhttp.open(\"POST\", \"http://srv.kondeo.com:3000/users/login\", true);\n\n    //Set the post type\n    xhttp.setRequestHeader('Content-Type', 'application/json');\n\n    //Check for responses\n    xhttp.onreadystatechange = function() {\n\n        //Send the status to the response function\n        Response(xhttp.status, \"Logged In! You can now use the extension!\");\n\n\n        if (xhttp.readyState == 4 && (xhttp.status > 199 || xhttp.status < 300)) {\n\n            //Get the json resonse\n            let data = JSON.parse(xhttp.responseText);\n\n            //Save their info\n            chrome.storage.sync.set({\n              extensionCode: data.token,\n              email: email\n          });\n        }\n    }\n\n    //Send the json\n    xhttp.send(JSON.stringify(payload));\n}\n\n// Restores the chrome extension code\n// stored in chrome.storage.\nfunction restore_options() {\n\n  //First set the onclick listener to the save button\n  let save = document.getElementById('saveButton');\n\n  // onClick's logic below:\n  save.addEventListener('click', loginExtension);\n\n  // Use default value of nothing\n  chrome.storage.sync.get({\n    email: ''\n  }, function(items) {\n\n      //In this call back, set the code to the retrieved value\n      document.getElementById('email').value = items.email;\n\n  });\n}\n\n//Restore the options on page load\ndocument.addEventListener('DOMContentLoaded', restore_options);\n"]}